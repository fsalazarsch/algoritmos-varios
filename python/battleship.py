# -*- coding: utf-8 -*-
"""new_battleship.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1--nImLHT_SpbexNZBLx1xJHknbPvd32s
"""

import numpy as np
import os
from IPython.display import clear_output
import random
import re


def display_posicion(stri):
  # transforma coordenadas del battleship en coordenadas del programa
  patron = r'^[a-jA-J](\d{1,2})$'

  match = re.search(patron, stri)
  numero = match.group(1) if match else None

  if numero:
    if int(numero) > 10  or  int(numero) < 0:
      return False
    stri = stri.upper()
    return str(ord(stri[0])-64) + ","+str(numero)
  else:
    return False


def cls():
    os.system('cls' if os.name == 'nt' else 'clear')
    clear_output(wait=True)


def posiciones_posibles(board, row, col, length):
    # Inicializar lista vacÃ­a para guardar posiciones posibles
    possible_positions = {}

    # Verificar si se puede colocar el barco hacia la derecha
    if col + length <= 10:
        positions = []
        for i in range(length):
            if board[row][col+i] != '_':
                break
            positions.append((row, col+i))
        else:
            possible_positions["Derecha ðŸ‘‰"] =positions

    # Verificar si se puede colocar el barco hacia la izquierda
    if col - length >= -1:
        positions = []
        for i in range(length):
            if board[row][col-i] != '_':
                break
            positions.append((row, col-i))
        else:
            possible_positions["Izquierda ðŸ‘ˆ"] =positions
            #possible_positions.append(positions)

    # Verificar si se puede colocar el barco hacia abajo
    if row + length <= 10:
        positions = []
        for i in range(length):
            if board[row+i][col] != '_':
                break
            positions.append((row+i, col))
        else:
            possible_positions["Abajo ðŸ‘‡"] =positions
            #possible_positions.append(positions)

    # Verificar si se puede colocar el barco hacia arriba
    if row - length >= -1:
        positions = []
        for i in range(length):
            if board[row-i][col] != '_':
                break
            positions.append((row-i, col))
        else:
            possible_positions["Arriba ðŸ‘†"] =positions
            #possible_positions.append(positions)

    return possible_positions


def posicionar_barco(board, nombre, largo, letra, cpu=False):

  flag_pos = False
  while flag_pos == False:
    if cpu == True:
      pos = str(random.randint(1, 10))+","+str(random.randint(1, 10))
    else:
      print("(Si quieres ver tu disposicion de barcos escribe *)")
      pos = input("PosiciÃ³n del "+nombre+" (ej A1):  ")
      pos = display_posicion(pos)
    if pos == "*":
      cls()
      print(board)
    else:
      posicion = pos.split(',')

      # Convertir cada cadena en un valor numÃ©rico
      row = int(posicion[0])-1
      col = int(posicion[1])-1
      if 0 <= row <= 10 and 0 <= col <= 10:
        if cpu == False:
          conf = input( "Posicion "+str(chr(row+65))+str(col+1)+" confirmar(S/N)? ")
          if conf =='S' or conf == 's':
            flag_pos = True
        else:
          flag_pos = True
        posiciones = posiciones_posibles(board, row, col, largo)
        opciones_pos = list(posiciones.keys())
        if len(opciones_pos) == 0:
          print("El barco no cabe en la posicÃ³n.")
          flag_pos = False
      else:
        print("Los valores ingresados no estÃ¡n en el rango esperado. "+str(row))
      
  #posiciones = posiciones_posibles(row, col, largo)

  #opciones_pos = list(posiciones.keys())
  flag_opc = False

  while flag_opc == False:
    if cpu == True:
      piv = int(random.randint(1, len(opciones_pos)))
      flag_opc = True
    else:
      for index, i in enumerate(opciones_pos):
        print(str(index+1)+")"+ i)
      piv = int(input("Selecciona la direcciÃ³n de "+nombre+": "))
      conf = input( opciones_pos[piv-1]+" confirmar(S/N)? ")
      if conf =='S' or conf == 's':
        flag_opc = True

    #print(posiciones[opciones_pos[piv-1]])

  for i in posiciones[opciones_pos[piv-1]]:
    board[i[0]][i[1]] = letra


def preparar_juego(board, cpu_board):
  #posicionar_barco(cpu_board, "Submarino", 3, "S", True)
  #posicionar_barco(cpu_board, "Destructor", 3, "D", True)
  #posicionar_barco(cpu_board, "Acorazado", 4, "A", True)
  #posicionar_barco(cpu_board, "Portaaviones", 5, "P", True)
  posicionar_barco(cpu_board, "Fragata", 2, "F", True)

  #posicionar_barco(board, "Submarino", 3, "S")
  #posicionar_barco(board, "Destructor", 3, "D")
  #posicionar_barco(board, "Acorazado", 4, "A")
  #posicionar_barco(board, "Portaaviones", 5, "P")
  posicionar_barco(board, "Fragata", 2, "F")

def disparo(cpu=False):
  flag_victoria = False
  numeros = list(range(1, 101))

  while flag_victoria == False:
    
    if cpu == False:
      board_disparo = board_disparo_player
      board_enemigo = cpu_board
      board_propio = board 
    else:
      board_disparo = board_disparo_cpu
      board_enemigo = board 
      board_propio = cpu_board

    flag_disparo = False
    while flag_disparo == False:
      if cpu == True:
        num = random.choice(numeros)
        numeros.remove(num)
        if  str(num%10) == 0:
          pos = str(num/10)+",10"
        else:
          pos = str(num/10)+","+str(num%10)

        pos = str(random.randint(1, 10))+","+str(random.randint(1, 10))
      else:
        print("Si quieres ver tu disposicion de barcos escribe *\nSi quieres ver tus disparos escribe ** ")
        pos = input("Disparar a (ej A1):  ")
        
      if pos == "*":
        cls()
        print(board_propio)
      elif pos == "**":
        cls()
        print(board_disparo)
      elif pos == "marco polo":
        cls()
        print(board_enemigo)

        #print(board_disparo_cpu)
        #print(cpu_board)
      else:
        if cpu == False:
          pos = display_posicion(pos)
        posicion = pos.split(',')

        # Convertir cada cadena en un valor numÃ©rico
        row = int(posicion[0])-1
        col = int(posicion[1])-1
        if 0 <= row <= 10 and 0 <= col <= 10:
          if cpu == False:
            conf = input( "Disparar "+str(chr(row+65))+str(col+1)+" confirmar(S/N)? ")
            if conf =='S' or conf == 's':
              if board_disparo[row][col] == 'X' or board_disparo[row][col] == 'O':
                print("Ya disparamos aqui")
              else:
                flag_disparo = True
          else:
            print("CPU: "+chr(row+1+65)+str(col+1))
            flag_disparo = True
    
    if board_enemigo[row][col] == '_':
      board_disparo[row][col] = 'O'
      board_enemigo[row][col] = 'O'
      print("Agua")
    else:
      print("Toque")
      board_disparo[row][col] = 'X'
      get_barco = board_enemigo[row][col]
      board_enemigo[row][col] = 'X'

      if np.isin(board_enemigo, get_barco).any() == False:
        print("Hundido")

        if np.isin(board_enemigo, ['S', 'D','A','P','F']).any() == False:
          if cpu == True:
            print("victoria CPU")
          else:
            print("victoria PLayer")
          flag_victoria = True
    cpu = not cpu


board = np.full((10, 10),'_', dtype=str)
cpu_board= np.full((10, 10),'_', dtype=str)
board_disparo_player= np.full((10, 10),'_', dtype=str)
board_disparo_cpu= np.full((10, 10),'_', dtype=str)

preparar_juego(board, cpu_board)
disparo()

#cls()

